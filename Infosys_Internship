https://docs.microsoft.com/en-us/ef/core/providers/?tabs=dotnet-core-cli -> database providers
https://www.youtube.com/watch?v=69WBy4MHYUw -> for .Net Core and MongoDb


in appsettings.json
"ConnectionStrings": {
    "KMaxMoviesDBConnectionString": "data source=.;initial catalog=KMaxMoviesDB;Integrated security=True;"

Create a Blank Solution->Add Project(.Net Core (Class Library)) && (.Net Core (Console Application))
Right Click on The class library-> manage nuget packages

EF Core can access many different databases through plug-in libraries called Database providers. 
There are different EF Core Database providers available for different databases. These providers are available as NuGet packages which you need to install. 
Recommended way to install the run-time libraries is by using NuGet Package Manager.
In this course, MS SQL Server database would be used to access data. So you need to install Microsoft.EntityFrameworkCore.SqlServer NuGet package.

SCAFFOLDING CONTEXT

Scaffold-DbContext -Connection "Data Source =localhost\SQLEXPRESS;Initial Catalog=MusicoDB;Integrated Security=true" -Provider Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models



ENTITY FRAMEWORK CORE DAL

Program.cs

using System;
using Infosys.DBFirstCore.DataAccessLayer;
namespace Infosys.DBFirstCore.ConsoleUI
{
    class Program
    {
        static void Main(string[] args)
        {
            QuickKartRepository repository = new QuickKartRepository();
            var categories = repository.GetAllCategories();
            Console.WriteLine("----------------------------------");
            Console.WriteLine("CategoryId\tCategoryName");
            Console.WriteLine("----------------------------------");
            foreach (var category in categories)
            {
                Console.WriteLine("{0}\t\t{1}", category.CategoryId, category.CategoryName);
            }
        }
		
		public List<Categories> GetAllCategories()
		{
			var categoriesList = (from category in context.Categories
                           orderby category.CategoryId
                           select category).ToList();
			return categoriesList;
		}
    }
}

In QuickKartRepository.cs

using System.Linq;
using System.Collections.Generic;

READ

public List<Products> GetProductsOnCategoryId(byte categoryId)
{
     List<Products> lstProducts = null;
     try
     {
          lstProducts = context.Products.Where(p => p.CategoryId == categoryId).ToList();
     }
     catch (Exception ex)
     {
          throw;
     }
     return null;
}

CREATE

public bool AddCategory(string categoryName)
{
     bool status = false;
     Categories category = new Categories();
     category.CategoryName = categoryName;
     try
     {
          context.Categories.Add(category);
          status = true;
     }
     catch (Exception)
     {
          status = false;
     }           
     return status;
}

UPDATE

public bool UpdateCategory(byte categoryId, string newCategoryName)
{
     bool status = false;
     Categories category = context.Categories.Find(categoryId);
     try
     {
           if (category != null)
           {
               category.CategoryName = newCategoryName;
               context.SaveChanges();
               status = true;
           }
           else
           {
               status = false;
           }
      }
      catch (Exception)
      {
           status = false;
      }           
      return status;
}


Alternatively,
Categories category = context.Categories
                             .Where(x => x.CategoryId == categoryId)
                             .FirstOrDefault();


DELETE

public bool DeleteProduct(string productId)
{
      Products product = null;
      bool status = false;
      try
      {
                product = context.Products.Find(productId);
                if (product != null)
                {
                    context.Products.Remove(product);
                    context.SaveChanges();
                    status = true;
                }
                else
                {
                    status = false;
                }
      }
      catch (Exception)
      {
             status = false;
      }
      return status;
}
Alternatively,
product = context.Products.Where(p => p.ProductId == productId).FirstOrDefault();


STORED PROCEDURE USING SQL PARAMETER

public int AddCategoryDetailsUsingUSP(string categoryName, out byte categoryId)
{
     categoryId = 0;
     int result = -1;
     int returnResult = 0;
     try
     {
          SqlParameter prmCategoryName = new SqlParameter("@CategoryName", categoryName);
          SqlParameter prmCategoryId = new SqlParameter("@CategoryId", System.Data.SqlDbType.TinyInt);
          prmCategoryId.Direction = System.Data.ParameterDirection.Output;
          SqlParameter prmReturnResult = new SqlParameter("@ReturnResult", System.Data.SqlDbType.Int);
          prmReturnResult.Direction = System.Data.ParameterDirection.Output;
          result = context.Database.ExecuteSqlCommand("EXEC @ReturnResult = usp_AddCategory @CategoryName, @CategoryId OUT", new[] { prmReturnResult, prmCategoryName, prmCategoryId });
          returnResult = Convert.ToInt32(prmReturnResult.Value);
          if (returnResult > 0)
          {
               categoryId = Convert.ToByte(prmCategoryId.Value);                 
          }
          else
          {
               categoryId = 0;
          }
      }
      catch (Exception ex)
      {
            categoryId = 0;
            result = -99;
            returnResult = -99;
      }
      return returnResult;
}

FUNCTION

public List<ProductCategoryName> GetProductsUsingTVF(byte categoryId)
{
      List<ProductCategoryName> lstProduct = null;
      try
      {
          SqlParameter prmCategoryId = new SqlParameter("@CategoryId",categoryId);
          lstProduct = context.ProductCategoryNames
                              .FromSql("SELECT * FROM dbo.ufn_GetAllProductDetails(@CategoryId)", prmCategoryId)
                              .ToList();
      }
      catch (Exception ex)
      {
           lstProduct = null;
      }
      return lstProduct;  
}




INSTALLING ANGULAR

npm install –g @angular/cli@6.2.1

SERVICES 

ng generate service user

In the user.service.ts add the following lines of code to import the HttpClient injectable class and 
add the constructor having one parameter http of type HttpClient injectable class as shown below.
Modify the user.service.ts to add validateCrendentials() which validates the user who attempts to log in as shown below.

In UserService.ts

import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { IUser } from '../../app/quickKart-interfaces/user';
import { catchError } from 'rxjs/operators';
import { Observable, throwError } from 'rxjs';
@Injectable({
  providedIn: 'root'
})
export class UserService {

  constructor(private http: HttpClient) { }
//POST
  validateCredentials(id: string, password: string): Observable<string>{
    var userObj: IUser;
    userObj = { EmailId: id, UserPassword: password, Gender: null, RoleId: null, DateOfBirth: null, Address: null };
    return this.http.post<string>('http://localhost:11990/api/user/ValidateUserCredentials', userObj).pipe(catchError(this.errorHandler));
  }

//PUT
 updateCartProduct(emailId: string, productId: string, qty: number): Observable<boolean> {
    var cartObj: ICart;
    cartObj = { ProductId: productId, EmailId: emailId, Quantity: qty };
    return this.http.put<boolean>('http://localhost:11990/api/user/UpdateCartProducts', cartObj).pipe(catchError(this.errorHandler));
  }

  errorHandler(error: HttpErrorResponse) {
    console.error(error);
    return throwError(error.message || "Server Error");
  } 
}






In logincomponent.ts

import { Component, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { UserService } from '../../quickKart-services/user-services/user.service';
@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  status: string;
  errorMsg: string;
  msg: string;
  showDiv: boolean = false;
  constructor(private _userService: UserService, private router: Router) { }
  submitLoginForm(form: NgForm) {
    this._userService.validateCredentials(form.value.email, form.value.password).subscribe(
      responseLoginStatus => {
        this.status = responseLoginStatus;
        if (this.status.toLowerCase() != "invalid credentials") {
          
		  //STORING THE ITEM INTO SESSIONS
		  
		  sessionStorage.setItem('userName', form.value.email);
          sessionStorage.setItem('userRole', this.status);
          
		  this.router.navigate(['/home']);
        }
        else {
          this.msg = this.status + ". Try again with valid credentials.";
        }
      },
      responseLoginError => {
        this.errorMsg = responseLoginError;
      },
      () => console.log("SubmitLoginForm method executed successfully")
    );
  }
  ngOnInit() {
  }
}

USING THE ITEM FROM SESSIONS

this.userRole = sessionStorage.getItem('userRole');

In updatecart component.ts file to fetch tha date from url


  ngOnInit() {
    this.productId = this.route.snapshot.params['productId'];
    this.productName = this.route.snapshot.params['productName'];
    this.quantity = parseInt(this.route.snapshot.params['quantity']);
    this.quantityAvailable = parseInt(this.route.snapshot.params['quantityAvailable']);
  }


SPARE HTML PAGE FOR REFERENCE


<div *ngIf="commonLayout">
  <app-common-layout></app-common-layout>
</div>
<div *ngIf="customerLayout">
  <app-customer-layout></app-customer-layout>
</div>
<div class="myContent">
  <div style="text-align:center;">
    <h1>View Products</h1>
    <br />
    <br />
    <div class="row">
      <div class="col-md-5" style="text-align:right">
        <label>Search :</label>
      </div>
      <div class="col-md-3">
        <input type="text" placeholder="Product name" (input)="searchProduct(productName.value)" class="form-control" #productName />
      </div>
      <div class="col-sm-2" style="text-align:right;">
        <label>Filter products:</label>
      </div>
      <div class="col-md-2">
        <select class="form-control" #categorydrop (change)="searchProductByCategory(categorydrop.value)">
          <option value="0">All Categories</option>
          <option *ngFor="let category of categories" value={{category.CategoryId}}>
            {{category.CategoryName}}
          </option>
        </select>
      </div>
    </div>
    <br />
    <div class="table-responsive">
      <table class="table" style="border:5px solid rgba(220,230,242,1);" *ngIf="filteredProducts && filteredProducts.length">
        <tr style="background-color:rgba(220,230,242,1); font-size:12pt">
          <th style="text-align:center;">Product Id</th>
          <th style="text-align:center;">Product Name</th>
          <th style="text-align:center;">Category Id</th>
          <th style="text-align:center;">Price</th>
          <th style="text-align:center;">Quantity Available</th>
          <th style="text-align:center;">Action</th>
        </tr>
        <tr *ngFor="let product of filteredProducts" style="background-color:white">
          <td> {{product.ProductId }} </td>
          <td> {{product.ProductName}} </td>
          <td> {{product.CategoryId}} </td>
          <td> {{product.Price}} </td>
          <td> {{product.QuantityAvailable}} </td>
          <td><img title="Add to cart" [src]="imageSrc"></td>
        </tr>
      </table>
    </div>
    <div *ngIf="showMsgDiv" style="">
      <h4 class="jumbotron" style="text-align:center;">No products available</h4>
    </div>
  </div>
</div>



In ProductService.ts

import { Injectable } from '@angular/core';
import { IProduct } from '../../app/quickKart-interfaces/product';
import { ICategory } from '../../app/quickKart-interfaces/category';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
@Injectable({
  providedIn: 'root'
})
export class ProductService {
  products: IProduct[];
  categories: ICategory[];
  constructor(private http: HttpClient) { }
 
 getProducts(): Observable<IProduct[]> {
    let tempVar = this.http.get<IProduct[]>('http://localhost:11990//api/Product/GetProducts').pipe(catchError(this.errorHandler));
    return tempVar;
  }



 errorHandler(error: HttpErrorResponse) {
    console.error(error);
    return  throwError(error.message  ||  "Server Error");
  } 
}


BOOTSTRAP

/* You can add global styles to this file, and also import other style files */
In the node command prompt

npm install Bootstrap font-awesome

@import '~bootstrap/dist/css/bootstrap.min.css';
@import "~font-awesome/css/font-awesome.css";
@import './app/quickKart-styles/quickKart-styles.css';  //for adding your additional styles 



ROUTING

In appcomponent

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AppComponent } from './app.component';
import { ViewProductsComponent } from './view-products/view-products.component';
import { LoginComponent } from './login/login.component';
import { HttpClientModule } from '@angular/common/http';
import { CommonLayoutComponent } from './layouts/common-layout/common-layout.component';
import { HomeComponent } from './home/home.component';
import { routing } from './app.routing';



@NgModule({
  declarations: [
    AppComponent,
    ViewProductsComponent,
    LoginComponent,
    CommonLayoutComponent,
    HomeComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

Open index.html present in  QuickKartApp -->src folder and observe the base tag present there.
Base tag is required to tell the router how to compose navigation URLs. "/" tells that the app folder is the application root for the QuickKartApp application.
Right click on the app folder present in QuickKartApp --> src folder and select Add --> New Item --> TypeScript file. Rename it as app.routing.ts.

In the app.routing.ts file

import { RouterModule, Routes } from '@angular/router';
import { ModuleWithProviders } from "@angular/core";
import { HomeComponent } from './home/home.component';
import { LoginComponent } from './login/login.component';
import { ViewProductsComponent } from './view-products/view-products.component';

  const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'home', component: HomeComponent },
  { path: 'login', component: LoginComponent },
  { path: 'viewProducts', component: ViewProductsComponent },
  { path: 'viewCart', component: ViewCartComponent },
  { path: 'viewPurchases', component: ViewPurchasesComponent },
  { path: 'updateCart/:productId/:productName/:quantity/:quantityAvailable', component: UpdateCartComponent },
  { path: '**', component: HomeComponent }
];

];
export const routing: ModuleWithProviders = RouterModule.forRoot(routes);


SPARE HTML PAGE FOR REFERENCE

        <a routerLink="/viewProducts" class="nav-link" href="#">View Products</a>
     

Now the HomeComponent's path is available, modify the root component i.e. app.component.html to add <router-outlet> tag to render the HomeComponent's view in the browser as shown below.

<router-outlet></router-outlet>


SPARE HTML PAGE FOR REFERENCE
 
<app-customer-layout></app-customer-layout>
<div class="myContent">
  <div class="container">
    <form #updateCartForm="ngForm">
      <div class="row">
        <div class="col-md-4">
        </div>
        <div class="col-md-4">
          <h4 style="text-align:center">Update Cart</h4>
          <h6 style="text-align:right;color:dimgrey;font-size:small">All fields are mandatory</h6>
          <div class="form-group">
            <div class="col" style="text-align:left">
              <label>Product Id</label>
            </div>
            <div class="col; input-group">
              <input type="text" name="prodId" class="form-control qkinput" readonly>
            </div>
          </div>
          <div class="form-group">
            <div class="col" style="text-align:left">
              <label>Product Name</label>
            </div>
            <div class="col; input-group">
              <input type="text" name="prodName" class="form-control qkinput" readonly>
            </div>
          </div>
          <div class="form-group">
            <div class="col" style="text-align:left">
              <label>Quantity</label>
            </div>
            <div class="col; input-group">
              <input type="number" name="prodQuantity" #prodQuantity="ngModel" class="form-control qkinput" min="1" max="" required ngModel>
              <div *ngIf="prodQuantity.errors && (prodQuantity.dirty || prodQuantity.touched)" class="text-danger-validation">
                <div [hidden]="!prodQuantity.errors.required">
                  <br />
                  Please enter the quantity.
                </div>
              </div>
            </div>
          </div>
          <div class="form-group" style="text-align:left">
            <button type="submit" [disabled]="!updateCartForm.form.valid" class="btn">Update</button> &nbsp;&nbsp;
            <a routerLink="/viewCart">Cancel</a>
          </div>
        </div>
        <div class="col-md-4">
        </div>
      </div>
    </form>
  </div>
</div>
 
 
DELETE

In userservice.ts

 deleteCartProduct(prodId: string, emailId: string): Observable<boolean> {
    var cartObj: ICart;
    cartObj = { ProductId: prodId, EmailId: emailId, Quantity: null };
    let httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }),body: cartObj };
    return this.http.delete<boolean>('http://localhost:11990/api/user/DeleteCartProduct', httpOptions).pipe(catchError(this.errorHandler));
  }

In deletecomponent.ts
removeProductFromCart(prod: ICartProduct) {
    this._userService.deleteCartProduct(prod.ProductId, this.emailId).subscribe(
      responseRemoveCartProductStatus => {
        this.status = responseRemoveCartProductStatus;
        if (this.status) {
          alert("Product deleted successfully.");
          this.ngOnInit();
        }
        else {
          alert("Product could not be deleted. Please try after sometime.");
        }
      },
      responseRemoveCartProductError => {
        this.errorMsg = responseRemoveCartProductError;
        alert("Something went wrong. Please try after sometime.");
      },
      () => console.log("RemoveProductFromCart method executed successfully")
    );
  }
}
  
 
Viewcartcomponent

import { Component, OnInit } from '@angular/core';
import { UserService } from '../../quickKart-services/user-service/user.service';
import { ICartProduct } from '../quickKart-interfaces/cartProduct';
import { Router } from '@angular/router';
@Component({
  selector: 'app-view-cart',
  templateUrl: './view-cart.component.html',
  styleUrls: ['./view-cart.component.css']
})
export class ViewCartComponent {
  errorMsg: string;
  emailId: string;
  Products: ICartProduct[];
  showError: boolean = false;
  status: boolean = false;
  constructor(private _userService: UserService, private router: Router) { }
  ngOnInit() {
    this.emailId = sessionStorage.getItem('userName');
    if (this.emailId == null) {
      this.router.navigate(['/login']);
    }
    this._userService.getCartProducts(this.emailId)
      .subscribe(
        resCartProductData => {
          this.Products = resCartProductData;
          if (this.Products.length == 0) {
            this.showError = true;
            this.errorMsg = "Your cart is empty.";
          }
        },
        resCartProductError => {
          this.Products = null;
          this.errorMsg = resCartProductError;
          console.log(this.errorMsg);
          if (this.Products.length == 0) {
            this.showError = true;
            this.errorMsg = "No records found.";
          }
        },
        () => console.log("GetCartProducts method executed successfully")
      );
  }
  updateCart(prod: ICartProduct) {
    this.router.navigate(['/updateCart', prod.ProductId, prod.ProductName, prod.Quantity, prod.QuantityAvailable]);
  }

}

//cors policy

startup.cs -> ConfigureServices
services.AddCors(options =>
            {
                options.AddPolicy("EnableCORS", builder =>
                {
                    builder.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod().Build();
                });
            });
startup.cs -> Configure   
 app.UseCors("EnableCORS");


